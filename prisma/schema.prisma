// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

model RStock {
    id          String @id @default(cuid())
    // rstock number
    identifier  String @unique
    // rstock attributes
    livery      String
    builtYear   String
    depot       String
    formation   String
    carCount    Int
    // sightings
    sightings   Sighting[]
    // operator set
    opSet       OperatorSet  @relation(fields: [opSetId], references: [id])
    opSetId     String
}

model Illustration {
    id          String @id @default(cuid())
    // illustration attributes
    url         String
    license     String
    author      String
    source      String
    // operator set
    opSet       OperatorSet @relation(fields: [opSetId], references: [id])
    opSetId     String
}

model Operator {
    id            String @id @default(cuid())
    // operator attributes
    name          String
    shortName     String?
    code          String @unique
    logoUrl       String 
    callStatCount String?
    website       String?
    franchise     String
    // operator sets
    operatorSets   OperatorSet[]
}

// Sighting table
model Sighting {
    id          String @id @default(cuid())
    // sighting attributes
    location    String
    date        DateTime
    // rstock
    rstock      RStock @relation(fields: [rstockId], references: [id])
    rstockId    String
    // user
    userId      String
}

model Class {
    id          String @id @default(cuid())
    // class attributes
    no          String @unique
    type        String
    model       String
    // Manufacturer
    manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id])
    manufacturerId String
    // operator sets
    operatorSets OperatorSet[]
}

model Manufacturer {
    id         String @id @default(cuid())
    // manufacturer attributes
    name       String
    logoUrl    String
    headquarters String?
    website    String?
    status     String?
    // classes
    classes    Class[]
}

model OperatorSet {
    id         String @id @default(cuid())
    // operator
    operator   Operator @relation(fields: [operatorId], references: [id])
    operatorId String 
    // class
    class      Class @relation(fields: [classId], references: [id])
    classId    String
    // illustrations
    illustrations Illustration[]
    // rstock
    rstock         RStock[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
